I. Overview understanding of cloud computing :
1. The user can store or access data in internet rather than local computer or server.
2. One can pay only for the services that is needed, and only as long as one needs.(Pay-as-you-go model)

3. There are 3 types of "service" models:
  A. Infrastructure as a service (Iaas): It is virtual computing resource. Eg. MS Azure
  B. Platform as a service (Paas): Hardware & Software tools over internet for application development. Eg. MS Azure Paas 
  C. Software as a service (Saas): Using software applications over internet based on subscription. Eg. MS 365

4. There are 3 types of "deployment" models:
  A. Public cloud: Here the services are publically available & can be shared across organisations
  B. Private cloud: Here the service is give to a single organisation. It gives more privacy & security of information.
  C. Hybrid cloud: It is combination of public and private clouds.

5. Use cases:
  A. For data storage and backup. Eg. Google drive
  B. Data analysis in business intelligence. Eg. Google BigQuery
  C. Hosting websites & application over internet. 
  D. Build and deploy AI models

II. Summary of project deployment in cloud:

A. Prerequisites
1. Azure student subscription
2. Visual Studio with Azure development packages

B. Setting up Azure environment:
1. Creating resource group
2. Create storage account
3. Create a queue
4. Get a Storage account connection string

C. Developing C# application in visual studio
1. Using neocortex api source code
2. Adding Azure.storage.queues package
3. Configure connection string directly in the code
{
  "ConnectionStrings": {
    "AzureStorage": "your_connection_string_here"
  }
}
4. Queue operation:
using Azure.Storage.Queues; // Namespace for Queue storage types
using System;

class Program
{
    static void Main(string[] args)
    {
        string connectionString = "your_connection_string_here";
        string queueName = "your_queue_name_here";

        // Create a QueueClient
        QueueClient queueClient = new QueueClient(connectionString, queueName);

        // Create the queue if it doesn't already exist
        queueClient.CreateIfNotExists();

        // Send a message to the queue
        queueClient.SendMessage("Hello, Azure Queue!");

        // Receive messages from the queue
        var message = queueClient.ReceiveMessage();

        if (message != null)
        {
            Console.WriteLine($"Received message: {message.Value.MessageText}");

            // Delete the message
            queueClient.DeleteMessage(message.Value.MessageId, message.Value.PopReceipt);
        }
    }
}


D. Adding Docker 
# Use the official .NET Core SDK image
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env
WORKDIR /app

# Copy csproj and restore as distinct layers
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . ./
RUN dotnet publish -c Release -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0
WORKDIR /app
COPY --from=build-env /app/out .

ENTRYPOINT ["dotnet", "your_application.dll"]


E. Deployment in Azure
1. Create container registry in azure portal
az acr login --name your_registry_name

Build docker image
docker build -t your_registry_name.azurecr.io/your_image_name:tag .


2. Pushing docker image to Azure container registry
docker push your_registry_name.azurecr.io/your_image_name:tag

3. Creating Azure app services - select docker container as publish option

F. Test, monitor & manage
  Use Azure Monitor, Application Insights, and other tools to monitor the performance and health of your application.
  Use Azure Storage Explorer to manage your queues and storage account.

---------------------------UNIT TEST PROJECT STEPS-----------------------------------------------------------------------
1. CREATING BIG DATASET
Source : Excel sheet
Number of data: 100
Number of test cases : more than 25
100 data for every test case

2. READING DATASET
3. WRITING RESULT ON AZURE WEB APPLICATION
---------------------------------PROJECT PLANNING--------------------------------------------------------------------------
We have created the outline for project plan which is structured in phases and includes essential tasks for each phases:
Phase 1: Planning and Requirements Gathering
1. Scope and Objectives
a. Identifying the purpose of the software program.
b. Defining the project objectives and deliverables.

2. Requirement gathering:
a. Determining of the technical requirements (e.g., OS, database, compute, storage).
b. Identifying any compliance and security requirements.
c. Understanding of the software architecture and its dependencies.

3. Resource allocation:
a. Separation of task roles among team members
b. Time allocation to each role
c. Knowing the required Azure services (VMs, databases, storage, etc.)

4. Risk assessment:
a. Identifying potential risks (e.g., data loss, downtime).
b. Planning mitigation strategies for each risk.

Phase 2: Design and Architecture
1. Azure structure designing:
Usage of azure services

2. Create architectural diagram
Visualization of system working architecture
Documentation of azure services interactions between components

Phase 3: Implementation
1. Setting up azure environment
a. Continue to using azure student subscription
b. Configuring resource groups for logical grouping of resources.
c. Setting up VMs, storage accounts, databases, and all other services.
d. Using of deployment scripts for integration & deployment of neocortex api software code into azure cloud

2. Data migration
a. Uploading software code to Azure repositories
b. Migrating existing data to Azure databases or storage
c. Ensuring data consistency and integrity during migration.

Phase 4: Testing & Validation
1. Functional testing: Testing of our software functionalities to ensure they work as expected. Integration testing that verify interaction between components.
2. Performance testing: Optimizing performance based on test results.

Phase 5: 
Deployment
1. Reviewing all configurations and settings.
2. Ensuring all team members are prepared with their work.
3. Deploying the software to the production environment using CI/CD pipelines.
4. Monitoring the deployment process for any issues.
5. Monitoring application performance and usage.
6. Addressing any post-deployment issues 

Maintenance, Continuous improvement & Documentation:
Identifying areas of improvement
Implementing enhancements and optimizations based on feedback.
Creating comprehensive documentation for the deployed software.
--------------------------Azure Blob storage ----------------------------------------------------------------------
Blobs (Binary Large Objects) are objects for storing unstructured data such as text or binary data. It can store images, videos, documents, backups, and logs.

--------------------------Azure container ----------------------------------------------------------------------
Containers are used to organize blobs within a storage account. Each blob must reside inside a container. Logical grouping of blobs to manage them more efficiently, such as separating logs, media files, and backups.

--------------------------Azure file shares ----------------------------------------------------------------------
Azure Files offers fully managed file shares in the cloud accessible via the Server Message Block (SMB) protocol or Network File System (NFS) protocol.
Migrating legacy applications that rely on SMB/NFS, sharing files across different virtual machines, and storing application configuration files.

--------------------------Azure Queues ----------------------------------------------------------------------
Azure Queue Storage is a service for storing large numbers of messages that can be accessed from anywhere via authenticated calls.
FIFO (First In, First Out): Ensures the order of messages is preserved.
Decoupling application components, building asynchronous workflows, and implementing reliable messaging between services.

--------------------------Azure Tables ----------------------------------------------------------------------
Azure Table Storage is a NoSQL key-value store for storing structured data, such as user data or application metadata.
 No predefined structure, allowing flexibility in data storage.
Storing large volumes of structured, non-relational data, user profiles, and other metadata.
*Comparison:
Blob Storage: Best for unstructured data like files and media.
Containers: Logical grouping for blobs within a storage account.
File Shares: Managed file shares for SMB/NFS-based access.
Queues: Messaging system for decoupling and asynchronous workflows.
Tables: NoSQL storage for structured, schema-less data.
